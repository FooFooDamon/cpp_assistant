/*
 * Copyright (c) 2016-2018, Wen Xiongchang <udc577 at 126 dot com>
 * All rights reserved.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any
 * damages arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any
 * purpose, including commercial applications, and to alter it and
 * redistribute it freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must
 * not claim that you wrote the original software. If you use this
 * software in a product, an acknowledgment in the product documentation
 * would be appreciated but is not required.
 *
 * 2. Altered source versions must be plainly marked as such, and
 * must not be misrepresented as being the original software.
 *
 * 3. This notice may not be removed or altered from any source
 * distribution.
 */

// NOTE: The original author also uses (short/code) names listed below,
//       for convenience or for a certain purpose, at different places:
//       wenxiongchang, wxc, Damon Wen, udc577

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public_protocols.proto

#ifndef PROTOBUF_public_5fprotocols_2eproto__INCLUDED
#define PROTOBUF_public_5fprotocols_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cafw {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_public_5fprotocols_2eproto();
void protobuf_AssignDesc_public_5fprotocols_2eproto();
void protobuf_ShutdownFile_public_5fprotocols_2eproto();

class Unused;
class MinimalBody;
class OldIdentityReportReq;
class OldIdentityReportResp;
class OldReqBodyPrefix;
class OldRespBodyPrefix;
class SimpleMultiPacketTestReq;

// ===================================================================

class Unused : public ::google::protobuf::Message {
 public:
  Unused();
  virtual ~Unused();

  Unused(const Unused& from);

  inline Unused& operator=(const Unused& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Unused& default_instance();

  void Swap(Unused* other);

  // implements Message ----------------------------------------------

  Unused* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Unused& from);
  void MergeFrom(const Unused& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool unused = 1;
  inline bool has_unused() const;
  inline void clear_unused();
  static const int kUnusedFieldNumber = 1;
  inline bool unused() const;
  inline void set_unused(bool value);

  // @@protoc_insertion_point(class_scope:cafw.Unused)
 private:
  inline void set_has_unused();
  inline void clear_has_unused();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool unused_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_public_5fprotocols_2eproto();
  friend void protobuf_AssignDesc_public_5fprotocols_2eproto();
  friend void protobuf_ShutdownFile_public_5fprotocols_2eproto();

  void InitAsDefaultInstance();
  static Unused* default_instance_;
};
// -------------------------------------------------------------------

class MinimalBody : public ::google::protobuf::Message {
 public:
  MinimalBody();
  virtual ~MinimalBody();

  MinimalBody(const MinimalBody& from);

  inline MinimalBody& operator=(const MinimalBody& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MinimalBody& default_instance();

  void Swap(MinimalBody* other);

  // implements Message ----------------------------------------------

  MinimalBody* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MinimalBody& from);
  void MergeFrom(const MinimalBody& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string session_id = 1;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  inline const ::std::string& session_id() const;
  inline void set_session_id(const ::std::string& value);
  inline void set_session_id(const char* value);
  inline void set_session_id(const char* value, size_t size);
  inline ::std::string* mutable_session_id();
  inline ::std::string* release_session_id();
  inline void set_allocated_session_id(::std::string* session_id);

  // @@protoc_insertion_point(class_scope:cafw.MinimalBody)
 private:
  inline void set_has_session_id();
  inline void clear_has_session_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* session_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_public_5fprotocols_2eproto();
  friend void protobuf_AssignDesc_public_5fprotocols_2eproto();
  friend void protobuf_ShutdownFile_public_5fprotocols_2eproto();

  void InitAsDefaultInstance();
  static MinimalBody* default_instance_;
};
// -------------------------------------------------------------------

class OldIdentityReportReq : public ::google::protobuf::Message {
 public:
  OldIdentityReportReq();
  virtual ~OldIdentityReportReq();

  OldIdentityReportReq(const OldIdentityReportReq& from);

  inline OldIdentityReportReq& operator=(const OldIdentityReportReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OldIdentityReportReq& default_instance();

  void Swap(OldIdentityReportReq* other);

  // implements Message ----------------------------------------------

  OldIdentityReportReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OldIdentityReportReq& from);
  void MergeFrom(const OldIdentityReportReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string session_id = 1;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  inline const ::std::string& session_id() const;
  inline void set_session_id(const ::std::string& value);
  inline void set_session_id(const char* value);
  inline void set_session_id(const char* value, size_t size);
  inline ::std::string* mutable_session_id();
  inline ::std::string* release_session_id();
  inline void set_allocated_session_id(::std::string* session_id);

  // required int32 server_type = 2;
  inline bool has_server_type() const;
  inline void clear_server_type();
  static const int kServerTypeFieldNumber = 2;
  inline ::google::protobuf::int32 server_type() const;
  inline void set_server_type(::google::protobuf::int32 value);

  // required string server_name = 3;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 3;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  inline void set_allocated_server_name(::std::string* server_name);

  // @@protoc_insertion_point(class_scope:cafw.OldIdentityReportReq)
 private:
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_server_type();
  inline void clear_has_server_type();
  inline void set_has_server_name();
  inline void clear_has_server_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* session_id_;
  ::std::string* server_name_;
  ::google::protobuf::int32 server_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_public_5fprotocols_2eproto();
  friend void protobuf_AssignDesc_public_5fprotocols_2eproto();
  friend void protobuf_ShutdownFile_public_5fprotocols_2eproto();

  void InitAsDefaultInstance();
  static OldIdentityReportReq* default_instance_;
};
// -------------------------------------------------------------------

class OldIdentityReportResp : public ::google::protobuf::Message {
 public:
  OldIdentityReportResp();
  virtual ~OldIdentityReportResp();

  OldIdentityReportResp(const OldIdentityReportResp& from);

  inline OldIdentityReportResp& operator=(const OldIdentityReportResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OldIdentityReportResp& default_instance();

  void Swap(OldIdentityReportResp* other);

  // implements Message ----------------------------------------------

  OldIdentityReportResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OldIdentityReportResp& from);
  void MergeFrom(const OldIdentityReportResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // required string session_id = 2;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  inline const ::std::string& session_id() const;
  inline void set_session_id(const ::std::string& value);
  inline void set_session_id(const char* value);
  inline void set_session_id(const char* value, size_t size);
  inline ::std::string* mutable_session_id();
  inline ::std::string* release_session_id();
  inline void set_allocated_session_id(::std::string* session_id);

  // @@protoc_insertion_point(class_scope:cafw.OldIdentityReportResp)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_session_id();
  inline void clear_has_session_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* session_id_;
  ::google::protobuf::int32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_public_5fprotocols_2eproto();
  friend void protobuf_AssignDesc_public_5fprotocols_2eproto();
  friend void protobuf_ShutdownFile_public_5fprotocols_2eproto();

  void InitAsDefaultInstance();
  static OldIdentityReportResp* default_instance_;
};
// -------------------------------------------------------------------

class OldReqBodyPrefix : public ::google::protobuf::Message {
 public:
  OldReqBodyPrefix();
  virtual ~OldReqBodyPrefix();

  OldReqBodyPrefix(const OldReqBodyPrefix& from);

  inline OldReqBodyPrefix& operator=(const OldReqBodyPrefix& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OldReqBodyPrefix& default_instance();

  void Swap(OldReqBodyPrefix* other);

  // implements Message ----------------------------------------------

  OldReqBodyPrefix* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OldReqBodyPrefix& from);
  void MergeFrom(const OldReqBodyPrefix& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string session_id = 1;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  inline const ::std::string& session_id() const;
  inline void set_session_id(const ::std::string& value);
  inline void set_session_id(const char* value);
  inline void set_session_id(const char* value, size_t size);
  inline ::std::string* mutable_session_id();
  inline ::std::string* release_session_id();
  inline void set_allocated_session_id(::std::string* session_id);

  // required int32 route_id = 2;
  inline bool has_route_id() const;
  inline void clear_route_id();
  static const int kRouteIdFieldNumber = 2;
  inline ::google::protobuf::int32 route_id() const;
  inline void set_route_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cafw.OldReqBodyPrefix)
 private:
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_route_id();
  inline void clear_has_route_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* session_id_;
  ::google::protobuf::int32 route_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_public_5fprotocols_2eproto();
  friend void protobuf_AssignDesc_public_5fprotocols_2eproto();
  friend void protobuf_ShutdownFile_public_5fprotocols_2eproto();

  void InitAsDefaultInstance();
  static OldReqBodyPrefix* default_instance_;
};
// -------------------------------------------------------------------

class OldRespBodyPrefix : public ::google::protobuf::Message {
 public:
  OldRespBodyPrefix();
  virtual ~OldRespBodyPrefix();

  OldRespBodyPrefix(const OldRespBodyPrefix& from);

  inline OldRespBodyPrefix& operator=(const OldRespBodyPrefix& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OldRespBodyPrefix& default_instance();

  void Swap(OldRespBodyPrefix* other);

  // implements Message ----------------------------------------------

  OldRespBodyPrefix* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OldRespBodyPrefix& from);
  void MergeFrom(const OldRespBodyPrefix& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // required string session_id = 2;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  inline const ::std::string& session_id() const;
  inline void set_session_id(const ::std::string& value);
  inline void set_session_id(const char* value);
  inline void set_session_id(const char* value, size_t size);
  inline ::std::string* mutable_session_id();
  inline ::std::string* release_session_id();
  inline void set_allocated_session_id(::std::string* session_id);

  // required int32 route_id = 3;
  inline bool has_route_id() const;
  inline void clear_route_id();
  static const int kRouteIdFieldNumber = 3;
  inline ::google::protobuf::int32 route_id() const;
  inline void set_route_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cafw.OldRespBodyPrefix)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_route_id();
  inline void clear_has_route_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* session_id_;
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 route_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_public_5fprotocols_2eproto();
  friend void protobuf_AssignDesc_public_5fprotocols_2eproto();
  friend void protobuf_ShutdownFile_public_5fprotocols_2eproto();

  void InitAsDefaultInstance();
  static OldRespBodyPrefix* default_instance_;
};
// -------------------------------------------------------------------

class SimpleMultiPacketTestReq : public ::google::protobuf::Message {
 public:
  SimpleMultiPacketTestReq();
  virtual ~SimpleMultiPacketTestReq();

  SimpleMultiPacketTestReq(const SimpleMultiPacketTestReq& from);

  inline SimpleMultiPacketTestReq& operator=(const SimpleMultiPacketTestReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleMultiPacketTestReq& default_instance();

  void Swap(SimpleMultiPacketTestReq* other);

  // implements Message ----------------------------------------------

  SimpleMultiPacketTestReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimpleMultiPacketTestReq& from);
  void MergeFrom(const SimpleMultiPacketTestReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string session_id = 1;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  inline const ::std::string& session_id() const;
  inline void set_session_id(const ::std::string& value);
  inline void set_session_id(const char* value);
  inline void set_session_id(const char* value, size_t size);
  inline ::std::string* mutable_session_id();
  inline ::std::string* release_session_id();
  inline void set_allocated_session_id(::std::string* session_id);

  // repeated int32 packet_number = 2;
  inline int packet_number_size() const;
  inline void clear_packet_number();
  static const int kPacketNumberFieldNumber = 2;
  inline ::google::protobuf::int32 packet_number(int index) const;
  inline void set_packet_number(int index, ::google::protobuf::int32 value);
  inline void add_packet_number(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      packet_number() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_packet_number();

  // @@protoc_insertion_point(class_scope:cafw.SimpleMultiPacketTestReq)
 private:
  inline void set_has_session_id();
  inline void clear_has_session_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* session_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > packet_number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_public_5fprotocols_2eproto();
  friend void protobuf_AssignDesc_public_5fprotocols_2eproto();
  friend void protobuf_ShutdownFile_public_5fprotocols_2eproto();

  void InitAsDefaultInstance();
  static SimpleMultiPacketTestReq* default_instance_;
};
// ===================================================================


// ===================================================================

// Unused

// optional bool unused = 1;
inline bool Unused::has_unused() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Unused::set_has_unused() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Unused::clear_has_unused() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Unused::clear_unused() {
  unused_ = false;
  clear_has_unused();
}
inline bool Unused::unused() const {
  return unused_;
}
inline void Unused::set_unused(bool value) {
  set_has_unused();
  unused_ = value;
}

// -------------------------------------------------------------------

// MinimalBody

// required string session_id = 1;
inline bool MinimalBody::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MinimalBody::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MinimalBody::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MinimalBody::clear_session_id() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    session_id_->clear();
  }
  clear_has_session_id();
}
inline const ::std::string& MinimalBody::session_id() const {
  return *session_id_;
}
inline void MinimalBody::set_session_id(const ::std::string& value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void MinimalBody::set_session_id(const char* value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void MinimalBody::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MinimalBody::mutable_session_id() {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  return session_id_;
}
inline ::std::string* MinimalBody::release_session_id() {
  clear_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_id_;
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MinimalBody::set_allocated_session_id(::std::string* session_id) {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (session_id) {
    set_has_session_id();
    session_id_ = session_id;
  } else {
    clear_has_session_id();
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// OldIdentityReportReq

// required string session_id = 1;
inline bool OldIdentityReportReq::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OldIdentityReportReq::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OldIdentityReportReq::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OldIdentityReportReq::clear_session_id() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    session_id_->clear();
  }
  clear_has_session_id();
}
inline const ::std::string& OldIdentityReportReq::session_id() const {
  return *session_id_;
}
inline void OldIdentityReportReq::set_session_id(const ::std::string& value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void OldIdentityReportReq::set_session_id(const char* value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void OldIdentityReportReq::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OldIdentityReportReq::mutable_session_id() {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  return session_id_;
}
inline ::std::string* OldIdentityReportReq::release_session_id() {
  clear_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_id_;
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OldIdentityReportReq::set_allocated_session_id(::std::string* session_id) {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (session_id) {
    set_has_session_id();
    session_id_ = session_id;
  } else {
    clear_has_session_id();
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 server_type = 2;
inline bool OldIdentityReportReq::has_server_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OldIdentityReportReq::set_has_server_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OldIdentityReportReq::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OldIdentityReportReq::clear_server_type() {
  server_type_ = 0;
  clear_has_server_type();
}
inline ::google::protobuf::int32 OldIdentityReportReq::server_type() const {
  return server_type_;
}
inline void OldIdentityReportReq::set_server_type(::google::protobuf::int32 value) {
  set_has_server_type();
  server_type_ = value;
}

// required string server_name = 3;
inline bool OldIdentityReportReq::has_server_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OldIdentityReportReq::set_has_server_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OldIdentityReportReq::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OldIdentityReportReq::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& OldIdentityReportReq::server_name() const {
  return *server_name_;
}
inline void OldIdentityReportReq::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void OldIdentityReportReq::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void OldIdentityReportReq::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OldIdentityReportReq::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* OldIdentityReportReq::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OldIdentityReportReq::set_allocated_server_name(::std::string* server_name) {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_name) {
    set_has_server_name();
    server_name_ = server_name;
  } else {
    clear_has_server_name();
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// OldIdentityReportResp

// required int32 error_code = 1;
inline bool OldIdentityReportResp::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OldIdentityReportResp::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OldIdentityReportResp::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OldIdentityReportResp::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 OldIdentityReportResp::error_code() const {
  return error_code_;
}
inline void OldIdentityReportResp::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// required string session_id = 2;
inline bool OldIdentityReportResp::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OldIdentityReportResp::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OldIdentityReportResp::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OldIdentityReportResp::clear_session_id() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    session_id_->clear();
  }
  clear_has_session_id();
}
inline const ::std::string& OldIdentityReportResp::session_id() const {
  return *session_id_;
}
inline void OldIdentityReportResp::set_session_id(const ::std::string& value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void OldIdentityReportResp::set_session_id(const char* value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void OldIdentityReportResp::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OldIdentityReportResp::mutable_session_id() {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  return session_id_;
}
inline ::std::string* OldIdentityReportResp::release_session_id() {
  clear_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_id_;
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OldIdentityReportResp::set_allocated_session_id(::std::string* session_id) {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (session_id) {
    set_has_session_id();
    session_id_ = session_id;
  } else {
    clear_has_session_id();
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// OldReqBodyPrefix

// required string session_id = 1;
inline bool OldReqBodyPrefix::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OldReqBodyPrefix::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OldReqBodyPrefix::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OldReqBodyPrefix::clear_session_id() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    session_id_->clear();
  }
  clear_has_session_id();
}
inline const ::std::string& OldReqBodyPrefix::session_id() const {
  return *session_id_;
}
inline void OldReqBodyPrefix::set_session_id(const ::std::string& value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void OldReqBodyPrefix::set_session_id(const char* value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void OldReqBodyPrefix::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OldReqBodyPrefix::mutable_session_id() {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  return session_id_;
}
inline ::std::string* OldReqBodyPrefix::release_session_id() {
  clear_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_id_;
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OldReqBodyPrefix::set_allocated_session_id(::std::string* session_id) {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (session_id) {
    set_has_session_id();
    session_id_ = session_id;
  } else {
    clear_has_session_id();
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 route_id = 2;
inline bool OldReqBodyPrefix::has_route_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OldReqBodyPrefix::set_has_route_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OldReqBodyPrefix::clear_has_route_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OldReqBodyPrefix::clear_route_id() {
  route_id_ = 0;
  clear_has_route_id();
}
inline ::google::protobuf::int32 OldReqBodyPrefix::route_id() const {
  return route_id_;
}
inline void OldReqBodyPrefix::set_route_id(::google::protobuf::int32 value) {
  set_has_route_id();
  route_id_ = value;
}

// -------------------------------------------------------------------

// OldRespBodyPrefix

// required int32 error_code = 1;
inline bool OldRespBodyPrefix::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OldRespBodyPrefix::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OldRespBodyPrefix::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OldRespBodyPrefix::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 OldRespBodyPrefix::error_code() const {
  return error_code_;
}
inline void OldRespBodyPrefix::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// required string session_id = 2;
inline bool OldRespBodyPrefix::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OldRespBodyPrefix::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OldRespBodyPrefix::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OldRespBodyPrefix::clear_session_id() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    session_id_->clear();
  }
  clear_has_session_id();
}
inline const ::std::string& OldRespBodyPrefix::session_id() const {
  return *session_id_;
}
inline void OldRespBodyPrefix::set_session_id(const ::std::string& value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void OldRespBodyPrefix::set_session_id(const char* value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void OldRespBodyPrefix::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OldRespBodyPrefix::mutable_session_id() {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  return session_id_;
}
inline ::std::string* OldRespBodyPrefix::release_session_id() {
  clear_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_id_;
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OldRespBodyPrefix::set_allocated_session_id(::std::string* session_id) {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (session_id) {
    set_has_session_id();
    session_id_ = session_id;
  } else {
    clear_has_session_id();
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 route_id = 3;
inline bool OldRespBodyPrefix::has_route_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OldRespBodyPrefix::set_has_route_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OldRespBodyPrefix::clear_has_route_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OldRespBodyPrefix::clear_route_id() {
  route_id_ = 0;
  clear_has_route_id();
}
inline ::google::protobuf::int32 OldRespBodyPrefix::route_id() const {
  return route_id_;
}
inline void OldRespBodyPrefix::set_route_id(::google::protobuf::int32 value) {
  set_has_route_id();
  route_id_ = value;
}

// -------------------------------------------------------------------

// SimpleMultiPacketTestReq

// required string session_id = 1;
inline bool SimpleMultiPacketTestReq::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimpleMultiPacketTestReq::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimpleMultiPacketTestReq::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimpleMultiPacketTestReq::clear_session_id() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    session_id_->clear();
  }
  clear_has_session_id();
}
inline const ::std::string& SimpleMultiPacketTestReq::session_id() const {
  return *session_id_;
}
inline void SimpleMultiPacketTestReq::set_session_id(const ::std::string& value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void SimpleMultiPacketTestReq::set_session_id(const char* value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void SimpleMultiPacketTestReq::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SimpleMultiPacketTestReq::mutable_session_id() {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  return session_id_;
}
inline ::std::string* SimpleMultiPacketTestReq::release_session_id() {
  clear_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_id_;
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SimpleMultiPacketTestReq::set_allocated_session_id(::std::string* session_id) {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (session_id) {
    set_has_session_id();
    session_id_ = session_id;
  } else {
    clear_has_session_id();
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 packet_number = 2;
inline int SimpleMultiPacketTestReq::packet_number_size() const {
  return packet_number_.size();
}
inline void SimpleMultiPacketTestReq::clear_packet_number() {
  packet_number_.Clear();
}
inline ::google::protobuf::int32 SimpleMultiPacketTestReq::packet_number(int index) const {
  return packet_number_.Get(index);
}
inline void SimpleMultiPacketTestReq::set_packet_number(int index, ::google::protobuf::int32 value) {
  packet_number_.Set(index, value);
}
inline void SimpleMultiPacketTestReq::add_packet_number(::google::protobuf::int32 value) {
  packet_number_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SimpleMultiPacketTestReq::packet_number() const {
  return packet_number_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SimpleMultiPacketTestReq::mutable_packet_number() {
  return &packet_number_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cafw

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_public_5fprotocols_2eproto__INCLUDED
