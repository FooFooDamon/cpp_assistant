// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public_protocols.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "public_protocols.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cafw {

namespace {

const ::google::protobuf::Descriptor* Unused_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Unused_reflection_ = NULL;
const ::google::protobuf::Descriptor* MinimalBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MinimalBody_reflection_ = NULL;
const ::google::protobuf::Descriptor* OldIdentityReportReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OldIdentityReportReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OldIdentityReportResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OldIdentityReportResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* OldReqBodyPrefix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OldReqBodyPrefix_reflection_ = NULL;
const ::google::protobuf::Descriptor* OldRespBodyPrefix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OldRespBodyPrefix_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleMultiPacketTestReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleMultiPacketTestReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_public_5fprotocols_2eproto() {
  protobuf_AddDesc_public_5fprotocols_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "public_protocols.proto");
  GOOGLE_CHECK(file != NULL);
  Unused_descriptor_ = file->message_type(0);
  static const int Unused_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unused, unused_),
  };
  Unused_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Unused_descriptor_,
      Unused::default_instance_,
      Unused_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unused, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unused, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Unused));
  MinimalBody_descriptor_ = file->message_type(1);
  static const int MinimalBody_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinimalBody, session_id_),
  };
  MinimalBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MinimalBody_descriptor_,
      MinimalBody::default_instance_,
      MinimalBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinimalBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinimalBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MinimalBody));
  OldIdentityReportReq_descriptor_ = file->message_type(2);
  static const int OldIdentityReportReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldIdentityReportReq, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldIdentityReportReq, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldIdentityReportReq, server_name_),
  };
  OldIdentityReportReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OldIdentityReportReq_descriptor_,
      OldIdentityReportReq::default_instance_,
      OldIdentityReportReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldIdentityReportReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldIdentityReportReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OldIdentityReportReq));
  OldIdentityReportResp_descriptor_ = file->message_type(3);
  static const int OldIdentityReportResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldIdentityReportResp, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldIdentityReportResp, session_id_),
  };
  OldIdentityReportResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OldIdentityReportResp_descriptor_,
      OldIdentityReportResp::default_instance_,
      OldIdentityReportResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldIdentityReportResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldIdentityReportResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OldIdentityReportResp));
  OldReqBodyPrefix_descriptor_ = file->message_type(4);
  static const int OldReqBodyPrefix_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldReqBodyPrefix, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldReqBodyPrefix, route_id_),
  };
  OldReqBodyPrefix_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OldReqBodyPrefix_descriptor_,
      OldReqBodyPrefix::default_instance_,
      OldReqBodyPrefix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldReqBodyPrefix, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldReqBodyPrefix, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OldReqBodyPrefix));
  OldRespBodyPrefix_descriptor_ = file->message_type(5);
  static const int OldRespBodyPrefix_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldRespBodyPrefix, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldRespBodyPrefix, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldRespBodyPrefix, route_id_),
  };
  OldRespBodyPrefix_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OldRespBodyPrefix_descriptor_,
      OldRespBodyPrefix::default_instance_,
      OldRespBodyPrefix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldRespBodyPrefix, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OldRespBodyPrefix, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OldRespBodyPrefix));
  SimpleMultiPacketTestReq_descriptor_ = file->message_type(6);
  static const int SimpleMultiPacketTestReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMultiPacketTestReq, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMultiPacketTestReq, packet_number_),
  };
  SimpleMultiPacketTestReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimpleMultiPacketTestReq_descriptor_,
      SimpleMultiPacketTestReq::default_instance_,
      SimpleMultiPacketTestReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMultiPacketTestReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMultiPacketTestReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimpleMultiPacketTestReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_public_5fprotocols_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Unused_descriptor_, &Unused::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MinimalBody_descriptor_, &MinimalBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OldIdentityReportReq_descriptor_, &OldIdentityReportReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OldIdentityReportResp_descriptor_, &OldIdentityReportResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OldReqBodyPrefix_descriptor_, &OldReqBodyPrefix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OldRespBodyPrefix_descriptor_, &OldRespBodyPrefix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimpleMultiPacketTestReq_descriptor_, &SimpleMultiPacketTestReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_public_5fprotocols_2eproto() {
  delete Unused::default_instance_;
  delete Unused_reflection_;
  delete MinimalBody::default_instance_;
  delete MinimalBody_reflection_;
  delete OldIdentityReportReq::default_instance_;
  delete OldIdentityReportReq_reflection_;
  delete OldIdentityReportResp::default_instance_;
  delete OldIdentityReportResp_reflection_;
  delete OldReqBodyPrefix::default_instance_;
  delete OldReqBodyPrefix_reflection_;
  delete OldRespBodyPrefix::default_instance_;
  delete OldRespBodyPrefix_reflection_;
  delete SimpleMultiPacketTestReq::default_instance_;
  delete SimpleMultiPacketTestReq_reflection_;
}

void protobuf_AddDesc_public_5fprotocols_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026public_protocols.proto\022\004cafw\"\030\n\006Unused"
    "\022\016\n\006unused\030\001 \001(\010\"!\n\013MinimalBody\022\022\n\nsessi"
    "on_id\030\001 \002(\t\"T\n\024OldIdentityReportReq\022\022\n\ns"
    "ession_id\030\001 \002(\t\022\023\n\013server_type\030\002 \002(\005\022\023\n\013"
    "server_name\030\003 \002(\t\"\?\n\025OldIdentityReportRe"
    "sp\022\022\n\nerror_code\030\001 \002(\005\022\022\n\nsession_id\030\002 \002"
    "(\t\"8\n\020OldReqBodyPrefix\022\022\n\nsession_id\030\001 \002"
    "(\t\022\020\n\010route_id\030\002 \002(\005\"M\n\021OldRespBodyPrefi"
    "x\022\022\n\nerror_code\030\001 \002(\005\022\022\n\nsession_id\030\002 \002("
    "\t\022\020\n\010route_id\030\003 \002(\005\"E\n\030SimpleMultiPacket"
    "TestReq\022\022\n\nsession_id\030\001 \002(\t\022\025\n\rpacket_nu"
    "mber\030\002 \003(\005", 450);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "public_protocols.proto", &protobuf_RegisterTypes);
  Unused::default_instance_ = new Unused();
  MinimalBody::default_instance_ = new MinimalBody();
  OldIdentityReportReq::default_instance_ = new OldIdentityReportReq();
  OldIdentityReportResp::default_instance_ = new OldIdentityReportResp();
  OldReqBodyPrefix::default_instance_ = new OldReqBodyPrefix();
  OldRespBodyPrefix::default_instance_ = new OldRespBodyPrefix();
  SimpleMultiPacketTestReq::default_instance_ = new SimpleMultiPacketTestReq();
  Unused::default_instance_->InitAsDefaultInstance();
  MinimalBody::default_instance_->InitAsDefaultInstance();
  OldIdentityReportReq::default_instance_->InitAsDefaultInstance();
  OldIdentityReportResp::default_instance_->InitAsDefaultInstance();
  OldReqBodyPrefix::default_instance_->InitAsDefaultInstance();
  OldRespBodyPrefix::default_instance_->InitAsDefaultInstance();
  SimpleMultiPacketTestReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_public_5fprotocols_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_public_5fprotocols_2eproto {
  StaticDescriptorInitializer_public_5fprotocols_2eproto() {
    protobuf_AddDesc_public_5fprotocols_2eproto();
  }
} static_descriptor_initializer_public_5fprotocols_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Unused::kUnusedFieldNumber;
#endif  // !_MSC_VER

Unused::Unused()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Unused::InitAsDefaultInstance() {
}

Unused::Unused(const Unused& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Unused::SharedCtor() {
  _cached_size_ = 0;
  unused_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Unused::~Unused() {
  SharedDtor();
}

void Unused::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Unused::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Unused::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Unused_descriptor_;
}

const Unused& Unused::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fprotocols_2eproto();
  return *default_instance_;
}

Unused* Unused::default_instance_ = NULL;

Unused* Unused::New() const {
  return new Unused;
}

void Unused::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unused_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Unused::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool unused = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unused_)));
          set_has_unused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Unused::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool unused = 1;
  if (has_unused()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->unused(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Unused::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool unused = 1;
  if (has_unused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->unused(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Unused::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool unused = 1;
    if (has_unused()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Unused::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Unused* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Unused*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Unused::MergeFrom(const Unused& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unused()) {
      set_unused(from.unused());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Unused::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Unused::CopyFrom(const Unused& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unused::IsInitialized() const {

  return true;
}

void Unused::Swap(Unused* other) {
  if (other != this) {
    std::swap(unused_, other->unused_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Unused::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Unused_descriptor_;
  metadata.reflection = Unused_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MinimalBody::kSessionIdFieldNumber;
#endif  // !_MSC_VER

MinimalBody::MinimalBody()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MinimalBody::InitAsDefaultInstance() {
}

MinimalBody::MinimalBody(const MinimalBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MinimalBody::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MinimalBody::~MinimalBody() {
  SharedDtor();
}

void MinimalBody::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (this != default_instance_) {
  }
}

void MinimalBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MinimalBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MinimalBody_descriptor_;
}

const MinimalBody& MinimalBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fprotocols_2eproto();
  return *default_instance_;
}

MinimalBody* MinimalBody::default_instance_ = NULL;

MinimalBody* MinimalBody::New() const {
  return new MinimalBody;
}

void MinimalBody::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MinimalBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MinimalBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MinimalBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MinimalBody::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MinimalBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MinimalBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MinimalBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MinimalBody::MergeFrom(const MinimalBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MinimalBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MinimalBody::CopyFrom(const MinimalBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinimalBody::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MinimalBody::Swap(MinimalBody* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MinimalBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MinimalBody_descriptor_;
  metadata.reflection = MinimalBody_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OldIdentityReportReq::kSessionIdFieldNumber;
const int OldIdentityReportReq::kServerTypeFieldNumber;
const int OldIdentityReportReq::kServerNameFieldNumber;
#endif  // !_MSC_VER

OldIdentityReportReq::OldIdentityReportReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OldIdentityReportReq::InitAsDefaultInstance() {
}

OldIdentityReportReq::OldIdentityReportReq(const OldIdentityReportReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OldIdentityReportReq::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_type_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OldIdentityReportReq::~OldIdentityReportReq() {
  SharedDtor();
}

void OldIdentityReportReq::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (this != default_instance_) {
  }
}

void OldIdentityReportReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OldIdentityReportReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OldIdentityReportReq_descriptor_;
}

const OldIdentityReportReq& OldIdentityReportReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fprotocols_2eproto();
  return *default_instance_;
}

OldIdentityReportReq* OldIdentityReportReq::default_instance_ = NULL;

OldIdentityReportReq* OldIdentityReportReq::New() const {
  return new OldIdentityReportReq;
}

void OldIdentityReportReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
    server_type_ = 0;
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OldIdentityReportReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_type;
        break;
      }

      // required int32 server_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_type_)));
          set_has_server_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_name;
        break;
      }

      // required string server_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OldIdentityReportReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->session_id(), output);
  }

  // required int32 server_type = 2;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server_type(), output);
  }

  // required string server_name = 3;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->server_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OldIdentityReportReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_id(), target);
  }

  // required int32 server_type = 2;
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server_type(), target);
  }

  // required string server_name = 3;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OldIdentityReportReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // required int32 server_type = 2;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_type());
    }

    // required string server_name = 3;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OldIdentityReportReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OldIdentityReportReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OldIdentityReportReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OldIdentityReportReq::MergeFrom(const OldIdentityReportReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OldIdentityReportReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OldIdentityReportReq::CopyFrom(const OldIdentityReportReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OldIdentityReportReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void OldIdentityReportReq::Swap(OldIdentityReportReq* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(server_type_, other->server_type_);
    std::swap(server_name_, other->server_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OldIdentityReportReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OldIdentityReportReq_descriptor_;
  metadata.reflection = OldIdentityReportReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OldIdentityReportResp::kErrorCodeFieldNumber;
const int OldIdentityReportResp::kSessionIdFieldNumber;
#endif  // !_MSC_VER

OldIdentityReportResp::OldIdentityReportResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OldIdentityReportResp::InitAsDefaultInstance() {
}

OldIdentityReportResp::OldIdentityReportResp(const OldIdentityReportResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OldIdentityReportResp::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OldIdentityReportResp::~OldIdentityReportResp() {
  SharedDtor();
}

void OldIdentityReportResp::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (this != default_instance_) {
  }
}

void OldIdentityReportResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OldIdentityReportResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OldIdentityReportResp_descriptor_;
}

const OldIdentityReportResp& OldIdentityReportResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fprotocols_2eproto();
  return *default_instance_;
}

OldIdentityReportResp* OldIdentityReportResp::default_instance_ = NULL;

OldIdentityReportResp* OldIdentityReportResp::New() const {
  return new OldIdentityReportResp;
}

void OldIdentityReportResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OldIdentityReportResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // required string session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OldIdentityReportResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OldIdentityReportResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OldIdentityReportResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // required string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OldIdentityReportResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OldIdentityReportResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OldIdentityReportResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OldIdentityReportResp::MergeFrom(const OldIdentityReportResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OldIdentityReportResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OldIdentityReportResp::CopyFrom(const OldIdentityReportResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OldIdentityReportResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void OldIdentityReportResp::Swap(OldIdentityReportResp* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OldIdentityReportResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OldIdentityReportResp_descriptor_;
  metadata.reflection = OldIdentityReportResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OldReqBodyPrefix::kSessionIdFieldNumber;
const int OldReqBodyPrefix::kRouteIdFieldNumber;
#endif  // !_MSC_VER

OldReqBodyPrefix::OldReqBodyPrefix()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OldReqBodyPrefix::InitAsDefaultInstance() {
}

OldReqBodyPrefix::OldReqBodyPrefix(const OldReqBodyPrefix& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OldReqBodyPrefix::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  route_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OldReqBodyPrefix::~OldReqBodyPrefix() {
  SharedDtor();
}

void OldReqBodyPrefix::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (this != default_instance_) {
  }
}

void OldReqBodyPrefix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OldReqBodyPrefix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OldReqBodyPrefix_descriptor_;
}

const OldReqBodyPrefix& OldReqBodyPrefix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fprotocols_2eproto();
  return *default_instance_;
}

OldReqBodyPrefix* OldReqBodyPrefix::default_instance_ = NULL;

OldReqBodyPrefix* OldReqBodyPrefix::New() const {
  return new OldReqBodyPrefix;
}

void OldReqBodyPrefix::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
    route_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OldReqBodyPrefix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_route_id;
        break;
      }

      // required int32 route_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_route_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &route_id_)));
          set_has_route_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OldReqBodyPrefix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->session_id(), output);
  }

  // required int32 route_id = 2;
  if (has_route_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->route_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OldReqBodyPrefix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_id(), target);
  }

  // required int32 route_id = 2;
  if (has_route_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->route_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OldReqBodyPrefix::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // required int32 route_id = 2;
    if (has_route_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->route_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OldReqBodyPrefix::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OldReqBodyPrefix* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OldReqBodyPrefix*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OldReqBodyPrefix::MergeFrom(const OldReqBodyPrefix& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_route_id()) {
      set_route_id(from.route_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OldReqBodyPrefix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OldReqBodyPrefix::CopyFrom(const OldReqBodyPrefix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OldReqBodyPrefix::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void OldReqBodyPrefix::Swap(OldReqBodyPrefix* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(route_id_, other->route_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OldReqBodyPrefix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OldReqBodyPrefix_descriptor_;
  metadata.reflection = OldReqBodyPrefix_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OldRespBodyPrefix::kErrorCodeFieldNumber;
const int OldRespBodyPrefix::kSessionIdFieldNumber;
const int OldRespBodyPrefix::kRouteIdFieldNumber;
#endif  // !_MSC_VER

OldRespBodyPrefix::OldRespBodyPrefix()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OldRespBodyPrefix::InitAsDefaultInstance() {
}

OldRespBodyPrefix::OldRespBodyPrefix(const OldRespBodyPrefix& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OldRespBodyPrefix::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  route_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OldRespBodyPrefix::~OldRespBodyPrefix() {
  SharedDtor();
}

void OldRespBodyPrefix::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (this != default_instance_) {
  }
}

void OldRespBodyPrefix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OldRespBodyPrefix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OldRespBodyPrefix_descriptor_;
}

const OldRespBodyPrefix& OldRespBodyPrefix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fprotocols_2eproto();
  return *default_instance_;
}

OldRespBodyPrefix* OldRespBodyPrefix::default_instance_ = NULL;

OldRespBodyPrefix* OldRespBodyPrefix::New() const {
  return new OldRespBodyPrefix;
}

void OldRespBodyPrefix::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
    route_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OldRespBodyPrefix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // required string session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_route_id;
        break;
      }

      // required int32 route_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_route_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &route_id_)));
          set_has_route_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OldRespBodyPrefix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_id(), output);
  }

  // required int32 route_id = 3;
  if (has_route_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->route_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OldRespBodyPrefix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // required string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // required int32 route_id = 3;
  if (has_route_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->route_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OldRespBodyPrefix::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // required string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // required int32 route_id = 3;
    if (has_route_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->route_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OldRespBodyPrefix::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OldRespBodyPrefix* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OldRespBodyPrefix*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OldRespBodyPrefix::MergeFrom(const OldRespBodyPrefix& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_route_id()) {
      set_route_id(from.route_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OldRespBodyPrefix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OldRespBodyPrefix::CopyFrom(const OldRespBodyPrefix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OldRespBodyPrefix::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void OldRespBodyPrefix::Swap(OldRespBodyPrefix* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(session_id_, other->session_id_);
    std::swap(route_id_, other->route_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OldRespBodyPrefix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OldRespBodyPrefix_descriptor_;
  metadata.reflection = OldRespBodyPrefix_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimpleMultiPacketTestReq::kSessionIdFieldNumber;
const int SimpleMultiPacketTestReq::kPacketNumberFieldNumber;
#endif  // !_MSC_VER

SimpleMultiPacketTestReq::SimpleMultiPacketTestReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimpleMultiPacketTestReq::InitAsDefaultInstance() {
}

SimpleMultiPacketTestReq::SimpleMultiPacketTestReq(const SimpleMultiPacketTestReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimpleMultiPacketTestReq::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleMultiPacketTestReq::~SimpleMultiPacketTestReq() {
  SharedDtor();
}

void SimpleMultiPacketTestReq::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (this != default_instance_) {
  }
}

void SimpleMultiPacketTestReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleMultiPacketTestReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleMultiPacketTestReq_descriptor_;
}

const SimpleMultiPacketTestReq& SimpleMultiPacketTestReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fprotocols_2eproto();
  return *default_instance_;
}

SimpleMultiPacketTestReq* SimpleMultiPacketTestReq::default_instance_ = NULL;

SimpleMultiPacketTestReq* SimpleMultiPacketTestReq::New() const {
  return new SimpleMultiPacketTestReq;
}

void SimpleMultiPacketTestReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
  }
  packet_number_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimpleMultiPacketTestReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_packet_number;
        break;
      }

      // repeated int32 packet_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packet_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_packet_number())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_packet_number())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_packet_number;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimpleMultiPacketTestReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->session_id(), output);
  }

  // repeated int32 packet_number = 2;
  for (int i = 0; i < this->packet_number_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->packet_number(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimpleMultiPacketTestReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_id(), target);
  }

  // repeated int32 packet_number = 2;
  for (int i = 0; i < this->packet_number_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->packet_number(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimpleMultiPacketTestReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

  }
  // repeated int32 packet_number = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->packet_number_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->packet_number(i));
    }
    total_size += 1 * this->packet_number_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleMultiPacketTestReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimpleMultiPacketTestReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimpleMultiPacketTestReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimpleMultiPacketTestReq::MergeFrom(const SimpleMultiPacketTestReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  packet_number_.MergeFrom(from.packet_number_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimpleMultiPacketTestReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleMultiPacketTestReq::CopyFrom(const SimpleMultiPacketTestReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleMultiPacketTestReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SimpleMultiPacketTestReq::Swap(SimpleMultiPacketTestReq* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    packet_number_.Swap(&other->packet_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimpleMultiPacketTestReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleMultiPacketTestReq_descriptor_;
  metadata.reflection = SimpleMultiPacketTestReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cafw

// @@protoc_insertion_point(global_scope)
